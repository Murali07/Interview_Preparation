1. What is aggregate query in MongoDB?

Ans:

MongoDB Aggregation is a database process that allows us to perform complex data transformations 
and computations on collections of documents.
It enables us to group, filter and manipulate data to produce summarized results. 
MongoDB Aggregation is typically carried out using the aggregation pipeline, which is a framework for data processing pipelines. 
Each stage of the pipeline transforms the documents as they pass through it and allowing for operations like 
filtering, sorting, reshaping and performing calculations on the data.

Aggregation pipeline methods:

Users Collection:

{
  "_id": ObjectId("60a3c7e96e06f64fb5ac0700"),
  "name": "Alice",
  "age": 30,
  "email": "alice@example.com",
  "city": "New York"
}
{
  "_id": ObjectId("60a3c7e96e06f64fb5ac0701"),
  "name": "Bob",
  "age": 35,
  "email": "bob@example.com",
  "city": "Los Angeles"
}
{
  "_id": ObjectId("60a3c7e96e06f64fb5ac0702"),
  "name": "Charlie",
  "age": 25,
  "email": "charlie@example.com",
  "city": "Chicago"
}

1. $group: Groups documents by a specified key and can perform operations oneach group, such as summing or averaging.

db.users.aggregate([
   { $group: { _id: "$city", averageAge: {$avg: "$age"}}}
])

output:
[
 { _id: 'New York', averageAge: 30 },
 { _id: 'Chicago', averageAge: 25 },
 {_id: 'Los Angeles', averageAge: 35 }
]

2. $project: Include or exclude fields from the output documents.

db.users.aggregate([
   { $project: { name: 1, city: 1, _id: 0 } }
])

output: 

[
  { name: 'Alice', city: 'New York' },
  { name: 'Bob', city: 'Los Angeles' },
  { name: 'Charlie', city: 'Chicago' }
]

3. $match: Filter documents to pass only those that match the specified conditions.

db.users.aggregate([
   { $match: { age: { $gt: 30 } } }
])

output:

[
  {
    _id: ObjectId('60a3c7e96e06f64fb5ac0701'),
    name: 'Bob',
    age: 35,
    email: 'bob@example.com',
    city: 'Los Angeles'
  }
]

4. $sort: It used to sort(order) the documents.

db.users.aggregate([
    { $sort: { age: 1 } }
])

output:

[
  {
    _id: ObjectId('60a3c7e96e06f64fb5ac0702'),
    name: 'Charlie',
    age: 25,
    email: 'charlie@example.com',
    city: 'Chicago'
  },
  {
    _id: ObjectId('60a3c7e96e06f64fb5ac0700'),
    name: 'Alice',
    age: 30,
    email: 'alice@example.com',
    city: 'New York'
  },
  {
    _id: ObjectId('60a3c7e96e06f64fb5ac0701'),
    name: 'Bob',
    age: 35,
    email: 'bob@example.com',
    city: 'Los Angeles'
  }
]

5. $limit: limit the number of documents passed to the next stage.

db.users.aggregate([
    { $limit: 2 }
])

output:

[
  {
    _id: ObjectId('60a3c7e96e06f64fb5ac0700'),
    name: 'Alice',
    age: 30,
    email: 'alice@example.com',
    city: 'New York'
  },
  {
    _id: ObjectId('60a3c7e96e06f64fb5ac0701'),
    name: 'Bob',
    age: 35,
    email: 'bob@example.com',
    city: 'Los Angeles'
  }
]

6. $skip: skips a specified number of documents in the pipeline.

db.orders.aggregate([
    { $skip: 5 }
])

output:

This query will skip the first 5 documents.

7. $lookup: The $lookup stage performs a left outer join with another collection in the same database to filter in documents from the "joined" collection for processing.

db.orders.aggregate([
    {
      $lookup: {
        from: "customers",
        localField: "customerId",
        foreignField: "_id",
        as: "customerDetails"
      }
    }
])

8. $unwind: The $unwind stage deconstructs an array field from the input documents to output a document for each element of the array.

Ex:
{
   "_id": 1,
   "orderNumber": "A123",
   "items": [
      { "product": "apple", "quantity": 10 },
      { "product": "banana", "quantity": 5 }
   ]
}

Query:

db.orders.aggregate([
    { $unwind: "$items" }
])



2. What is the difference between normal query and aggregate query?

Normal Query

Normal queries in MongoDB are used to retrieve documents from a collection based on specific criteria. They are straightforward and typically involve basic operations like finding, inserting, updating, or deleting documents.

Key Characteristics:

Simple Retrieval: Retrieves documents matching specific criteria.
Projection: Can include or exclude fields in the returned documents.
Sorting and Limiting: Supports basic sorting and limiting of results.
CRUD Operations: Primarily used for Create, Read, Update, and Delete operations.

Example:

db.orders.find({ customerId: 12345 }, { _id: 0, product: 1, quantity: 1 })

This query retrieves all documents from the orders collection where customerId is 12345, projecting only the product and quantity fields.

Aggregate Query

Aggregate queries use MongoDB’s aggregation framework, which allows for complex data processing and transformation. They are used to perform operations like filtering, grouping, sorting, reshaping, and computing aggregated values.

Key Characteristics:

Pipeline Processing: Uses a sequence of stages (pipeline) to process and transform documents.
Complex Computations: Supports advanced operations like grouping, averaging, summing, and joining collections.
Multiple Stages: Can combine multiple stages to achieve complex data transformations.
Data Reshaping: Allows extensive reshaping and manipulation of data, including array operations.

Example:

db.orders.aggregate([
   { $match: { customerId: 12345 } },
   { $group: { _id: "$product", totalQuantity: { $sum: "$quantity" } } },
   { $sort: { totalQuantity: -1 } }
])

This aggregate query retrieves all documents from the orders collection where customerId is 12345, groups them by product, calculates the total quantity for each product, and sorts the results by total quantity in descending order.

Key Differences

Purpose:

Normal Query: For simple retrieval and basic data operations.
Aggregate Query: For complex data processing and aggregation.

Operations:

Normal Query: Limited to basic operations (find, update, delete).
Aggregate Query: Supports advanced operations (grouping, joining, reshaping).

Output:

Normal Query: Returns documents matching the criteria.
Aggregate Query: Returns transformed and aggregated data based on the pipeline stages.

Performance:

Normal Query: Generally faster for simple queries.
Aggregate Query: Can be slower due to the complexity of operations, but often optimized for large data processing tasks.

Flexibility:

Normal Query: Limited flexibility in data manipulation.
Aggregate Query: Highly flexible, allowing complex data transformations.

3. In React Auto completion functionality, auto search we just type 2 or 3 letter and multiple suggestions comes up. How we can achieve this?

4. Sorting the array of elements without using inbuilt methods?

We can implement various sorting algorithms to sort an array of elements without using built-in methods.

Bubble sort

Bubble Sort is a simple algorithm that repeatedly steps through the list, compares adjacent elements, 
and swaps them if they are in the wrong order. The pass through the list is repeated until the list is sorted.

Selection sort

Selection Sort works by dividing the input list into two parts: a sorted sublist of items which is built up from left to right at the front (left) of the list and a sublist of the remaining unsorted items. 
The algorithm proceeds by finding the smallest (or largest, depending on sorting order) element from the unsorted sublist, swapping it with the leftmost unsorted element, and moving the sublist boundaries one element to the right.

Insertion sort

Insertion Sort works by taking elements from the unsorted part of the list and inserting them into the correct position in the sorted part of the list.

Merge sort

Merge Sort is an efficient, stable, comparison-based, divide and conquer sorting algorithm. 
Most implementations produce a stable sort, meaning that the implementation preserves the input order of equal elements in the sorted output.

Quick sort

Quick Sort is an efficient, comparison-based, divide and conquer sorting algorithm. 
It works by selecting a 'pivot' element from the array and partitioning the other elements into two sub-arrays, according to whether they are less than or greater than the pivot.

<br />

5. Any other method for better performance of sorting?

Yes, for better performance in sorting, you can consider using advanced algorithms like Heap Sort and Tim Sort. 
These algorithms are more efficient, especially for large datasets.

1. Heap Sort

Heap Sort is a comparison-based sorting technique based on a binary heap data structure. 
It is similar to selection sort where we first find the maximum element and place it at the end. 
We repeat the same process for the remaining elements.

Time Complexity: O(n log n)

2. Tim Sort
Tim Sort is a hybrid stable sorting algorithm, derived from merge sort and insertion sort, 
designed to perform well on many kinds of real-world data. It is the default sorting algorithm 
in Python’s built-in sort() and sorted() functions, and also in Java’s Arrays.sort().

Time Complexity: O(n log n) in the worst case, but performs better on many real-world data sets.

6. String interpolation and serialization in JavaScript

7. In HTML what is block elements and inline elements?

8. ContextAPI?

9. What is Lazy loading and why will you use?


_______________________________
Pattern:

module design pattern
MVC pattern
nvm pattern

_______________________________
Find the output of the below code.

let x = null;

console.log(typeof x) // output: object


let x = undefined;

console.log(typeof x) // output: undefined

let x = "Hello";

console.log(typeof(typeof x)) // output: string


let x = 20;

console.log(typeof(typeof x)) // output: string
_______________________________
