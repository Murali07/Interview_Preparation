1. What is aggregate query in MongoDB?

Ans:

MongoDB Aggregation is a database process that allows us to perform complex data transformations and 
computations on collections of documents.
It enables us to group, filter and manipulate data to produce summarized results. 
MongoDB Aggregation is typically carried out using the aggregation pipeline, which is a framework for data processing pipelines. 
Each stage of the pipeline transforms the documents as they pass through it and allowing for operations like 
filtering, sorting, reshaping and performing calculations on the data.

Aggregation pipeline methods:

Users Collection:

{
  "_id": ObjectId("60a3c7e96e06f64fb5ac0700"),
  "name": "Alice",
  "age": 30,
  "email": "alice@example.com",
  "city": "New York"
}
{
  "_id": ObjectId("60a3c7e96e06f64fb5ac0701"),
  "name": "Bob",
  "age": 35,
  "email": "bob@example.com",
  "city": "Los Angeles"
}
{
  "_id": ObjectId("60a3c7e96e06f64fb5ac0702"),
  "name": "Charlie",
  "age": 25,
  "email": "charlie@example.com",
  "city": "Chicago"
}

1. $group:

db.users.aggregate([
   { $group: { _id: "$city", averageAge: {$avg: "$age"}}}
])

output:
[
 { _id: 'New York', averageAge: 30 },
 { _id: 'Chicago', averageAge: 25 },
 {_id: 'Los Angeles', averageAge: 35 }
]

2. $project: Include or exclude fields from the output documents.

db.users.aggregate([
   { $project: { name: 1, city: 1, _id: 0 } }
])

output: 

[
  { name: 'Alice', city: 'New York' },
  { name: 'Bob', city: 'Los Angeles' },
  { name: 'Charlie', city: 'Chicago' }
]

3. $match: Filter documents to pass only those that match the specified conditions.

db.users.aggregate([
   { $match: { age: { $gt: 30 } } }
])

output:

[
  {
    _id: ObjectId('60a3c7e96e06f64fb5ac0701'),
    name: 'Bob',
    age: 35,
    email: 'bob@example.com',
    city: 'Los Angeles'
  }
]

4. $sort: It used to sort(order) the documents.

db.users.aggregate([
    { $sort: { age: 1 } }
])

output:

[
  {
    _id: ObjectId('60a3c7e96e06f64fb5ac0702'),
    name: 'Charlie',
    age: 25,
    email: 'charlie@example.com',
    city: 'Chicago'
  },
  {
    _id: ObjectId('60a3c7e96e06f64fb5ac0700'),
    name: 'Alice',
    age: 30,
    email: 'alice@example.com',
    city: 'New York'
  },
  {
    _id: ObjectId('60a3c7e96e06f64fb5ac0701'),
    name: 'Bob',
    age: 35,
    email: 'bob@example.com',
    city: 'Los Angeles'
  }
]

5. $limit: limit the number of documents passed to the next stage.

db.users.aggregate([
    { $limit: 2 }
])

output:

[
  {
    _id: ObjectId('60a3c7e96e06f64fb5ac0700'),
    name: 'Alice',
    age: 30,
    email: 'alice@example.com',
    city: 'New York'
  },
  {
    _id: ObjectId('60a3c7e96e06f64fb5ac0701'),
    name: 'Bob',
    age: 35,
    email: 'bob@example.com',
    city: 'Los Angeles'
  }
]

6. $skip: skips a specified number of documents in the pipeline.

db.orders.aggregate([
    { $skip: 5 }
])

output:

This query will skip the first 5 documents.

7. $lookup: The $lookup stage performs a left outer join with another collection in the same database to filter in documents from the "joined" collection for processing.

db.orders.aggregate([
    {
      $lookup: {
        from: "customers",
        localField: "customerId",
        foreignField: "_id",
        as: "customerDetails"
      }
    }
])

8. $unwind: The $unwind stage deconstructs an array field from the input documents to output a document for each element of the array.

Ex:
{
   "_id": 1,
   "orderNumber": "A123",
   "items": [
      { "product": "apple", "quantity": 10 },
      { "product": "banana", "quantity": 5 }
   ]
}

Query:

db.orders.aggregate([
    { $unwind: "$items" }
])



2. What is the difference between normal query and aggregate query?

3. In React Auto completion functionality, auto search we just type 2 or 3 letter and multiple suggestions comes up. How we can achieve this?

4. Sorting the array of elements without using inbuilt methods?

5. Any other method for better performance of sorting?

6. String interpolation and serialization in JavaScript

7. In HTML what is block elements and inline elements?

8. ContextAPI?

9. What is Lazy loading and why will you use?


_______________________________
Pattern:

module design pattern
MVC pattern
nvm pattern

_______________________________
Find the output of the below code.

let x = null;

console.log(typeof x) // output: object


let x = undefined;

console.log(typeof x) // output: undefined

let x = "Hello";

console.log(typeof(typeof x)) // output: string


let x = 20;

console.log(typeof(typeof x)) // output: string
_______________________________
